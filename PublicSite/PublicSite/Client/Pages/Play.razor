@page "/play"
@using System;
@using PublicSite.Client.DataObjects;
@using InterfurCreations.AdventureGames.Core.DataObjects;
@using System.Timers;
@using PublicSite.Client.Components;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IMenuService MenuService

@if (IsLoading)
{
    <div style="margin:auto; width:50%; padding:10px; text-align:center">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <h4>Test</h4>
}
else
{
    <div class="row justify-content-md-center h-100" style="margin:0; padding:0; overflow-x:hidden">
        <div class="col-lg-6 mh-100" style="margin:0; padding:0;">
            <div class="col mh-100" id="messageDiv" style="margin:0; padding:0; overflow-x:hidden" @onscroll="(() => DivItemsScrolled())">
                @foreach (var message in Messages)
                {
                    <div class="card fadeInRight bg-secondary" style="width:100%">
                        <div class="card-body">
                            @if (message.PlayerMessage)
                            {
                                <h6 class="card-subtitle text-muted text-right">You</h6>
                                <p class="card-text float-right">
                                    @((MarkupString)message.Message)
                                </p>
                            }
                            else if (message.ImageUrl)
                            {
                                <h6 class="card-subtitle text-muted text-left">Game</h6>
                                <img style="width:40%; height:auto" class="img-fluid" src="@message.Message" />
                            }
                            else
                            {
                                <h6 class="card-subtitle text-muted text-left">Game</h6>
                                <p class="card-text float-left">
                                    @((MarkupString)message.Message)
                                </p>
                            }
                        </div>
                    </div>
                }
            </div>


        </div>
    </div>
}
<footer class="footer row flex-shrink-0 justify-content-center" style="min-height:120px">
    <div class="col-lg-6 bg-primary" style="padding:0">
        <div class="d-flex flex-wrap justify-content-center">
            @if (TakeInput)
            {
                <form @onsubmit="@(() => MessageButtonClicked(TextInput))">
                    <div class="input-group p-1" style="max-width:800px">
                        <div class="input-group-append">
                            <button style="height:auto" class="btn btn-outline-info text-wrap bg-secondary" type="button" id="button-addon1">Submit</button>
                        </div>
                        <input style="height:auto" type="text" placeholder="Enter your message" class="form-control" @bind="@TextInput" aria-describedby="button-addon1" />
                    </div>
                </form>
            }
            @foreach (var button in CurrentButtons)
            {
                <div style="padding:3px 5px 3px 5px">
                    <button class="btn btn-secondary text-wrap btn-game bg-secondary" @onclick="@(() => MessageButtonClicked(button))">@button</button>
                </div>
            }
        </div>
    </div>
</footer>


<Modal @ref="AccountModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Login or create new account</ModalTitle>
            <CloseButton Clicked="@CloseAccountModal" />
        </ModalHeader>
        <ModalBody>
            @if (!IsModalLoading)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Existing Account</h5>
                        <div class="form-group">
                            <label>Player Code</label>
                            <input type="text" class="form-control" @bind="@PlayerCode" />
                            <br />
                            <button class="btn btn-info" @onclick="@EnteredId">Play</button>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">New Account</h5>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" class="form-control" @bind="@NewAccountName" />
                            <br />
                            <button class="btn btn-info" @onclick="@GenerateAccount">Generate Account</button>
                        </div>
                    </div>
                </div>

                @*<div class="g-signin2" data-onsuccess="onSignIn"></div>*@
                @if (!string.IsNullOrEmpty(ErrorText))
                {
                    <p>@ErrorText</p>
                }
            }
            else
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
        </ModalBody>
        <ModalFooter>
            @if (ActivePlayer != null)
            {
                <h5>Your unique player code is: '@ActivePlayer?.AccessKey' - use this to login again</h5>
                <button class="btn btn-success" @onclick="CloseAccountModalAndPlay">Close &amp; Play</button>
            }
        </ModalFooter>
    </ModalContent>
</Modal>


@code {

    private const int MESSAGE_LIMIT = 100;

    private List<SavedMessage> Messages;
    private List<string> CurrentButtons;
    private Timer ScrollToBottomInterval;
    private bool HasScrolled;
    private bool LoggedIn;
    private Modal AccountModal;

    private string PlayerCode;
    private string NewAccountName;

    private string ErrorText;

    private bool IsLoading { get; set; }
    private bool IsModalLoading;

    private bool TakeInput;
    private string TextInput;

    private WebPlayerDataObject ActivePlayer;

    protected override async Task OnInitializedAsync()
    {
        Messages = new List<SavedMessage>();
        CurrentButtons = new List<string>();

        ScrollToBottomInterval = new Timer();
        ScrollToBottomInterval.Elapsed += new ElapsedEventHandler(OnIntervalTick);
        ScrollToBottomInterval.Interval = 100;
        ScrollToBottomInterval.Enabled = true;

        MenuService.ShowAccountButton(true);
        MenuService.OnOpenAccount += () => OpenAccountModal();
    }

    private async void EnteredId()
    {
        IsModalLoading = true;
        try
        {
            var result = await Http.PostJsonAsync<WebPlayerDataObject>($"GameMessage/getWebAccount", PlayerCode);
            if (result == null)
            {
                RevalidateAccount();
                IsModalLoading = false;
                return;
            }
            ActivePlayer = result;
            await JSRuntime.InvokeAsync<string>("setCookie", "playerCode", result.AccessKey, 900);

            CloseAccountModalAndPlay();
        }
        catch (Exception e)
        {
            ErrorText = e.Message;
            RevalidateAccount();
        }
        IsModalLoading = false;
        StateHasChanged();
    }

    private void RevalidateAccount()
    {
        ActivePlayer = null;
        AccountModal.Show();
        StateHasChanged();
    }

    private async void GenerateAccount()
    {
        if (string.IsNullOrWhiteSpace(NewAccountName))
        {
            ErrorText = "Please enter a valid name!";
            return;
        }
        IsModalLoading = true;
        var result = await Http.GetJsonAsync<WebPlayerDataObject>($"GameMessage/createWebAccount?name={NewAccountName}");

        await JSRuntime.InvokeAsync<string>("setCookie", "playerCode", result.AccessKey, 900);
        ActivePlayer = result;
        IsModalLoading = false;
        CloseAccountModalAndPlay();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetLoading();
            var result = await JSRuntime.InvokeAsync<string>("getCookie", "playerCode");
            if (!string.IsNullOrEmpty(result))
            {
                PlayerCode = result;
                EnteredId();
            }
            else
            {
                OpenAccountModal();
            }
            SetNotLoading();
        }
    }

    private async void MessageButtonClicked(string message)
    {
        HasScrolled = false;
        TakeInput = false;

        Messages.Add(new SavedMessage { PlayerMessage = true, Message = message });
        var result = await Http.PostJsonAsync<ExecutionResult>($"GameMessage/message",
            new MessageSendDataObject { message = message, player_code = ActivePlayer.AccessKey });
        result.MessagesToShow.ForEach(a =>
        {
            if (!string.IsNullOrEmpty(a.ImageUrl))
            {
            // Issue retrieving HTTPS images from FA
            if (a.ImageUrl.StartsWith("https"))
                    a.ImageUrl = a.ImageUrl.Replace("https", "http");
                Messages.Add(new SavedMessage { Message = a.ImageUrl, ImageUrl = true });
            }
            else
            {
                a.Message = a.Message.Replace("\n", "<br \\>");
                Messages.Add(new SavedMessage { Message = a.Message, PlayerMessage = false });
            }
        });
        CurrentButtons = result.OptionsToShow;

        if (result.AskForInput)
        {
            TakeInput = true;
        }

        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("scrollToEnd", "messageDiv", 20);
        StateHasChanged();

        if (Messages.Count > MESSAGE_LIMIT)
            Messages.RemoveRange(0, 50);
    }

    private void OnIntervalTick(object sender, EventArgs e)
    {
        //if (!HasScrolled)
        //JSRuntime.InvokeVoidAsync("scrollToEnd", "messageDiv", 2);
    }

    private void DivItemsScrolled()
    {
        HasScrolled = true;
    }

    private void CloseAccountModal()
    {
        AccountModal.Hide();
    }

    private void CloseAccountModalAndPlay()
    {
        AccountModal.Hide();
        MessageButtonClicked("Start");
    }

    private void OpenAccountModal()
    {
        AccountModal.Show();
    }

    private void SetLoading()
    {
        IsLoading = true;
        StateHasChanged();
    }

    private void SetNotLoading()
    {
        IsLoading = false;
        StateHasChanged();
    }
}
