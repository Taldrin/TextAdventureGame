using InterfurCreations.AdventureGames.Graph;
using InterfurCreations.AdventureGames.MXVisualGraph;
using System.Collections.Generic;
using System.Linq;

namespace InterfurCreations.AdventureGames.MXGraphDrawServices
{
    public class DrawGameConverter
    {
        public MXGraph ConvertToMXGraph(DrawState drawState)
        {
            var graph = new MXGraph();

            graph.RootNode = new MXNode
            {
                NodeText = "GRAPH GENERATED BY INTERFURCREATIONS",
            };

            var firstNode = RecursivelyConvert(drawState, graph.RootNode, new Dictionary<string, MXNode>(), 50, 50);
            graph.RootNode.Connections = new List<MXNodeConnection>
            {
                new MXNodeConnection
                {
                    ConnectionText = "",
                    ResultNode = firstNode
                }
            };

            return graph;
        }

        private MXNode RecursivelyConvert(DrawState currentState, MXNode currentNode, Dictionary<string, MXNode> nodesCreated, int x, int y)
        {
            if(nodesCreated.TryGetValue(currentState.Id, out var existingNode)) {
                return existingNode;
            }

            var newNode = new MXNode
            {
                NodeText = currentState.StateText,
                NodeID = currentState.Id,
                x = x,
                y = y
            };

            nodesCreated.Add(currentState.Id, newNode);

            int i = 0;
            newNode.Connections = currentState.StateOptions.Select(a => new MXNodeConnection
            {
                ConnectionText = a.StateText,
                ResultNode = RecursivelyConvert(a.ResultState, newNode, nodesCreated, x + (i * 50), y + 300)
            }).ToList();

            return newNode;
        }
    }
}
